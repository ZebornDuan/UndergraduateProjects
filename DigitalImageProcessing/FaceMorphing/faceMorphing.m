%
% parameters
% image1 -- source image file 1
% image2 -- source image file 2
% feature1 -- csv file - 68 feature points of image1 generated by the python script
% feature2 -- csv file - 68 feature points of image2 generated by the python script


% ! image1 and image2 must have the same size ! 
% ! or the codes will catch an exception !

function faceMorphing(image1, image2, feature1, feature2)
    source1 = imread(image1);
    source2 = imread(image2);
    
    height1 = size(source1, 1);
    width1 = size(source1, 2);
    
    height2 = size(source2, 1);
    width2 = size(source2, 2);
    
    if height1 ~= height2 || width1 ~= width2
        error('two source images must have the same size');
    end

    m1 = csvread(feature1);
    m1 = reshape(m1, 68, 2);
    x1 = m1(:, 1);
    y1 = m1(:, 2);

    m2 = csvread(feature2);
    m2 = reshape(m2, 68, 2);
    x2 = m2(:, 1);
    y2 = m2(:, 2);

    % add the corner points to the feature points
    x1 = [x1; 1; width1; width1; 1]; % size(xA) = [72, 1]
    y1 = [y1; 1; 1; height1; height1];
    x2 = [x2; 1; width2; width2; 1];
    y2 = [y2; 1; 1; height2; height2];

    alpha = 0.5;

    result = zeros(height1, width1, 3);
    x3 = alpha * x1 + (1 - alpha) * x2;
    y3 = alpha * y1 + (1 - alpha) * y2;
    triangle = delaunay(x3, y3);
    triangle_number = size(triangle, 1);

    x1_3 = zeros(height1, width1);
    y1_3 = zeros(height1, width1);
    x2_3 = zeros(height2, width2);
    y2_3 = zeros(height2, width2);

    [X, Y] = meshgrid(1:width1, 1:height1);

    for k = 1:triangle_number
        [w0, w1, w2, r] = inTriangle(X, Y, x3(triangle(k, 1)), y3(triangle(k, 1)), x3(triangle(k, 2)), y3(triangle(k, 2)), x3(triangle(k, 3)), y3(triangle(k, 3)));
        w0(~r) = 0; w1(~r) = 0; w2(~r) = 0;
        x1_3 = x1_3 + w0 .* x1(triangle(k, 1)) + w1 .* x1(triangle(k, 2)) + w2 .* x1(triangle(k, 3));
        y1_3 = y1_3 + w0 .* y1(triangle(k, 1)) + w1 .* y1(triangle(k, 2)) + w2 .* y1(triangle(k, 3));
        x2_3 = x2_3 + w0 .* x2(triangle(k, 1)) + w1 .* x2(triangle(k, 2)) + w2 .* x2(triangle(k, 3));
        y2_3 = y2_3 + w0 .* y2(triangle(k, 1)) + w1 .* y2(triangle(k, 2)) + w2 .* y2(triangle(k, 3));
    end
 
    result1(:, :, 1) = interp2(X, Y, double(source1(:, :, 1)), x1_3, y1_3);
    result1(:, :, 2) = interp2(X, Y, double(source1(:, :, 2)), x1_3, y1_3);
    result1(:, :, 3) = interp2(X, Y, double(source1(:, :, 3)), x1_3, y1_3);

    result2(:, :, 1) = interp2(X, Y, double(source2(:, :, 1)), x2_3, y2_3);
    result2(:, :, 2) = interp2(X, Y, double(source2(:,:, 2)), x2_3, y2_3);
    result2(:, :, 3) = interp2(X, Y, double(source2(:,:, 3)), x2_3, y2_3);

    result = alpha * result1 + (1 - alpha) * result2;
    imshow(uint8(result));
end